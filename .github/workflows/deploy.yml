# =============================================================================
# Deploy (Alpha → Beta → RTM → Prod)
# -----------------------------------------------------------------------------
# What this does
#  1) Builds Docker images for API and Web.
#  2) Pushes them to GHCR (ghcr.io/<owner>/<image>:<tag>).
#  3) Copies docker-compose.yml to a remote server via SSH/SCP.
#  4) Logs in to GHCR on the server and runs `docker compose up -d`.
#
# IMPORTANT
#  - Web image build uses the REPO ROOT as context and Dockerfile at web/Dockerfile
#    since the web package depends on a local ThemeBuilder folder outside /web.
#  - Per-environment secrets (set under GitHub Environments: alpha/beta/rtm/prod):
#      DEPLOY_HOST         : hostname/IP of target server
#      DEPLOY_USER         : SSH user
#      DEPLOY_SSH_KEY      : private key (PEM) with access to server
#      DEPLOY_PATH         : absolute path on server (e.g., /opt/mcpx)
#      SQL_CONN_STRING     : full SQL Server connection string for that env
#    Optional:
#      DEPLOY_PORT         : SSH port (default 22)
#      GHCR_USERNAME       : override registry username (defaults to github.actor)
#      GHCR_PAT            : PAT for GHCR (defaults to GITHUB_TOKEN)
# =============================================================================
name: Deploy (Alpha→Beta→RTM→Prod)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        options: [alpha, beta, rtm, prod]
      image_tag:
        description: "Image tag (defaults to commit SHA)"
        required: false
        type: string

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ inputs.environment }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_API: mcpx-admin-api
  IMAGE_WEB: mcpx-admin-web

jobs:
  build-and-push:
    name: Build & Push images to GHCR
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute tag
        id: meta
        run: |
          TAG="${{ github.sha }}"
          if [ -n "${{ inputs.image_tag }}" ]; then TAG="${{ inputs.image_tag }}"; fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ------------------ API image ------------------
      - name: Build & Push API image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_API }}:${{ steps.meta.outputs.tag }}

      # ------------------ Web image ------------------
      # NOTE: context is REPO ROOT (.) and we point to web/Dockerfile explicitly.
      # This is required because the web package depends on ../design/themebuilder.
      - name: Build & Push Web image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: web/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_WEB }}:${{ steps.meta.outputs.tag }}

  deploy:
    name: Remote deploy via SSH
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: ${{ inputs.environment }}
    env:
      OWNER: ${{ github.repository_owner }}
      IMAGE_TAG: ${{ needs.build-and-push.outputs.tag }}
    steps:
      - name: Checkout (for compose templating)
        uses: actions/checkout@v4

      - name: Validate required secrets
        shell: bash
        run: |
          set -euo pipefail
          missing=()
          for key in DEPLOY_HOST DEPLOY_USER DEPLOY_SSH_KEY DEPLOY_PATH SQL_CONN_STRING; do
            if [ -z "${{ secrets[format('{0}', key)] || '' }}" ]; then
              missing+=("$key")
            fi
          done
          if [ "${#missing[@]}" -gt 0 ]; then
            echo "::error::Missing required secrets: ${missing[*]}"
            exit 1
          fi

      - name: Prepare docker-compose for remote
        run: |
          mkdir -p out
          # Replace OWNER and IMAGE_TAG placeholders in compose file
          sed "s/\${OWNER}/${OWNER}/g; s/\${IMAGE_TAG}/${IMAGE_TAG}/g" deploy/docker-compose.yml > out/docker-compose.yml

      - name: Upload docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key:      ${{ secrets.DEPLOY_SSH_KEY }}
          port:     ${{ secrets.DEPLOY_PORT || '22' }}
          source:   "out/docker-compose.yml"
          target:   "${{ secrets.DEPLOY_PATH }}/"

      - name: Deploy remotely (docker compose up -d)
        uses: appleboy/ssh-action@v1.2.0
        env:
          REGISTRY: ${{ env.REGISTRY }}
          USERNAME: ${{ secrets.GHCR_USERNAME || github.actor }}
          PASSWORD: ${{ secrets.GHCR_PAT      || secrets.GITHUB_TOKEN }}
        with:
          host:     ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key:      ${{ secrets.DEPLOY_SSH_KEY }}
          port:     ${{ secrets.DEPLOY_PORT || '22' }}
          script: |
            set -euo pipefail
            cd "${{ secrets.DEPLOY_PATH }}"

            echo "$PASSWORD" | docker login $REGISTRY -u "$USERNAME" --password-stdin

            # Ensure .env exists with SQL_CONN_STRING (one-time)
            if [ ! -f .env ]; then
              echo "SQL_CONN_STRING=${{ secrets.SQL_CONN_STRING }}" > .env
              chmod 600 .env
            fi

            # Pull latest images by tag and restart containers
            docker compose pull
            docker compose up -d

            # Optional cleanup to save space
            docker image prune -f
