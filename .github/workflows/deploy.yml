name: Deploy (Alpha→Beta→RTM→Prod)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        options: [alpha, beta, rtm, prod]
      image_tag:
        description: "Image tag (default: commit SHA)"
        required: false
        type: string

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_API: mcpx-admin-api
  IMAGE_WEB: mcpx-admin-web

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute tag
        id: meta
        run: |
          TAG="${{ github.sha }}"
          if [ -n "${{ inputs.image_tag }}" ]; then TAG="${{ inputs.image_tag }}"; fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push API
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_API }}:${{ steps.meta.outputs.tag }}

      - name: Build & push Web
        uses: docker/build-push-action@v6
        with:
          context: ./web
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_WEB }}:${{ steps.meta.outputs.tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: ${{ inputs.environment }}
    env:
      OWNER: ${{ github.repository_owner }}
      IMAGE_TAG: ${{ needs.build-and-push.outputs.tag }}
    steps:
      - name: Prepare compose for remote
        run: |
          mkdir -p out
          sed "s/\${OWNER}/${OWNER}/g; s/\${IMAGE_TAG}/${IMAGE_TAG}/g" deploy/docker-compose.yml > out/docker-compose.yml

      - name: Upload compose
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key:      ${{ secrets.DEPLOY_SSH_KEY }}
          port:     ${{ secrets.DEPLOY_PORT || '22' }}
          source:   "out/docker-compose.yml"
          target:   "${{ secrets.DEPLOY_PATH }}/"

      - name: Deploy remotely
        uses: appleboy/ssh-action@v1.2.0
        env:
          REGISTRY: ${{ env.REGISTRY }}
          USERNAME: ${{ secrets.GHCR_USERNAME || github.actor }}
          PASSWORD: ${{ secrets.GHCR_PAT      || secrets.GITHUB_TOKEN }}
        with:
          host:     ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key:      ${{ secrets.DEPLOY_SSH_KEY }}
          port:     ${{ secrets.DEPLOY_PORT || '22' }}
          script: |
            set -euo pipefail
            cd "${{ secrets.DEPLOY_PATH }}"
            echo "$PASSWORD" | docker login $REGISTRY -u "$USERNAME" --password-stdin
            # Optional: create .env per environment with SQL_CONN_STRING
            if [ ! -f .env ]; then
              echo "SQL_CONN_STRING=${{ secrets.SQL_CONN_STRING }}" > .env
            fi
            docker compose pull
            docker compose up -d
            docker image prune -f
