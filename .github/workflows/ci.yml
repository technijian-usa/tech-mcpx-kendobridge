# =============================================================================
# CI (Web + API + ThemeBuilder guard)
# -----------------------------------------------------------------------------
# Strict on theming/build sanity; tolerant on lockfile/casing quirks.
# =============================================================================

name: CI (Web + API + ThemeBuilder guard)

on:
  push:
    branches: [ main, develop, alpha, beta, rtm ]
  pull_request:

permissions:
  contents: read
  actions: read
  packages: read
  security-events: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  DOTNET_VERSION: "8.0.x"
  WEB_DIR: web
  API_DIR: api
  THEME_PACKAGE_DIR: design/themebuilder/export/mcpx-kendobridge

jobs:
  theme-guard:
    name: ThemeBuilder + repo sanity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install jq (JSON CLI)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read ThemeBuilder package name
        id: theme_name
        shell: bash
        run: |
          set -euo pipefail
          PKG="${THEME_PACKAGE_DIR}/package.json"
          if [ ! -f "$PKG" ]; then
            echo "::error file=$PKG::ThemeBuilder package.json not found."
            exit 1
          fi
          NAME=$(jq -r '.name // empty' "$PKG")
          if [ -z "$NAME" ]; then
            echo "::error file=$PKG::ThemeBuilder package.json missing 'name' field."
            exit 1
          fi
          echo "THEME_NAME=$NAME" >> $GITHUB_ENV
          echo "name=$NAME" >> $GITHUB_OUTPUT

      - name: Verify ThemeBuilder dist assets are committed & tracked
        shell: bash
        run: |
          set -euo pipefail
          CSS="${THEME_PACKAGE_DIR}/dist/css/${THEME_NAME}.css"
          SCSS_DIR="${THEME_PACKAGE_DIR}/dist/scss"
          test -f "$CSS"      || { echo "::error file=$CSS::Missing compiled CSS from ThemeBuilder export."; exit 1; }
          test -d "$SCSS_DIR" || { echo "::error file=$SCSS_DIR::Missing SCSS sources from ThemeBuilder export."; exit 1; }
          git ls-files --error-unmatch "$CSS" >/dev/null 2>&1 || {
            echo "::error file=$CSS::ThemeBuilder dist assets are not tracked by git (check .gitignore)."; exit 1; }

      - name: Validate web/package.json and dependency wiring
        shell: bash
        run: |
          set -euo pipefail
          WEB_PKG="${WEB_DIR}/package.json"
          test -f "$WEB_PKG" || { echo "::error file=$WEB_PKG::Missing $WEB_PKG."; exit 1; }
          nl -ba "$WEB_PKG" | sed -n '1,200p'
          jq . "$WEB_PKG" >/dev/null || { echo "::error file=$WEB_PKG::Invalid JSON."; exit 1; }
          DEP_PATH=$(jq -r --arg n "$THEME_NAME" '.dependencies[$n] // .devDependencies[$n] // empty' "$WEB_PKG")
          if [ -z "$DEP_PATH" ]; then
            echo "::error file=$WEB_PKG::Add a dependency on '$THEME_NAME': \"file:../${THEME_PACKAGE_DIR}\"."; exit 1; fi
          if [ "$DEP_PATH" != "file:../${THEME_PACKAGE_DIR}" ]; then
            echo "::error file=$WEB_PKG::Dependency for '$THEME_NAME' must be \"file:../${THEME_PACKAGE_DIR}\" (found: $DEP_PATH)."; exit 1; fi

      - name: Verify theme usage (no base-theme dupes; vendor theme imported)
        shell: bash
        run: |
          set -euo pipefail
          SRC_DIR="${WEB_DIR}/src"
          test -d "$SRC_DIR" || { echo "::error::Missing $SRC_DIR directory."; exit 1; }
          if grep -R -nE "@progress/kendo-theme-[^/]+/dist/(all|index)\.(css|scss)" "$SRC_DIR" 2>/dev/null; then
            echo "::error::Found direct Kendo base-theme import(s) in /web/src. Remove them and import only from the vendor ThemeBuilder package."
            exit 1
          fi
          if ! grep -R -nE "${THEME_NAME}/dist/(scss|css)/" "$SRC_DIR" 2>/dev/null; then
            echo "::error::web/src does not import the vendor theme. Add: import '${THEME_NAME}/dist/scss/index.scss';"
            exit 1
          fi

      - name: Case sanity (Linux runners are case-sensitive) — WARN ONLY
        shell: bash
        run: |
          set -euo pipefail
          [ -f "${API_DIR}/dockerfile" ] && echo "::warning file=${API_DIR}/dockerfile::Rename to 'Dockerfile' (capital D)."
          [ -f "${WEB_DIR}/dockerfile" ] && echo "::warning file=${WEB_DIR}/dockerfile::Rename to 'Dockerfile' (capital D)."
          [ -d "${API_DIR}/OpenApi" ]     && echo "::warning file=${API_DIR}/OpenApi::Consider renaming folder to 'openapi'."

  web:
    name: Build & test Web
    needs: theme-guard
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WEB_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (with npm cache)
        if: ${{ hashFiles(format('{0}/package-lock.json', env.WEB_DIR)) != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WEB_DIR }}/package-lock.json

      - name: Setup Node (no cache fallback)
        if: ${{ hashFiles(format('{0}/package-lock.json', env.WEB_DIR)) == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # ✅ Fixed: map secret to env, then check env in `if:`
      - name: Activate Kendo UI license (optional)
        env:
          KENDO_UI_LICENSE: ${{ secrets.KENDO_UI_LICENSE }}
        if: ${{ env.KENDO_UI_LICENSE != '' }}
        run: npx --yes kendo-ui-license activate "${KENDO_UI_LICENSE}"

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Lint (if configured)
        run: npm run lint --if-present

      - name: Build
        run: npm run build

      - name: Unit tests (if present)
        run: npm test --if-present

      - name: Upload Web build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: |
            ${{ env.WEB_DIR }}/dist
            ${{ env.WEB_DIR }}/build
          if-no-files-found: warn

  api:
    name: Build & test API
    needs: theme-guard
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.API_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      - name: Test (API unit tests, if present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "../api.Tests" ]; then
            dotnet test ../api.Tests --configuration Release --no-build --verbosity normal
          else
            echo "::notice::No api.Tests directory found. Skipping API tests."
          fi

  codeql:
    name: CodeQL (JS + C#)
    if: ${{ github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/main') }}
    needs: [web, api]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript, csharp
      - uses: github/codeql-action/analyze@v3
