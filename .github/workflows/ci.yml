name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  merge_group:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-dotnet:
    name: Build & Test (.NET 8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release -warnaserror
      - name: Test (TRX + coverage)
        run: |
          mkdir -p artifacts/test-results
          dotnet test --configuration Release \
            --logger "trx;LogFileName=tests.trx" \
            --results-directory ./artifacts/test-results \
            /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results
          path: artifacts/test-results

  build-ui:
    name: Build Admin Portal (KendoReact) â€” optional
    runs-on: ubuntu-latest
    if: ${{ hashFiles('web/**/package.json') != '' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      # Compliance: license is build-time only; secrets live only in GitHub Environments.
      - name: Prepare Telerik license file (masked, optional)
        env:
          TELERIK_LICENSE: ${{ secrets.TELERIK_LICENSE }}
          TELERIK_LICENSE_PATH: ${{ secrets.TELERIK_LICENSE_PATH }}
        run: |
          set -euo pipefail
          echo "::add-mask::$TELERIK_LICENSE"
          if [ -n "${TELERIK_LICENSE:-}" ]; then
            echo "$TELERIK_LICENSE" > "$RUNNER_TEMP/telerik-license.txt"
            echo "TELERIK_LICENSE_PATH=$RUNNER_TEMP/telerik-license.txt" >> "$GITHUB_ENV"
          fi
      - name: Install deps
        run: npm ci --prefix web
      - name: Build UI
        run: npm run build --prefix web
      - name: Cleanup license file (hardening)
        if: always()
        run: |
          test -f "$TELERIK_LICENSE_PATH" && shred -u "$TELERIK_LICENSE_PATH" || true
      - name: Upload UI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ui-dist
          path: web/dist

  openapi-lint-diff:
    name: OpenAPI Lint & Diff
    runs-on: ubuntu-latest
    needs: [ build-test-dotnet ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Redocly CLI
        run: npm i -g @redocly/cli
      - name: Lint OpenAPI
        run: redocly lint api/openapi/mcp-proxy.yaml
      - name: Diff vs previous tag (if any)
        id: diff
        run: |
          set -e
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            PREV=$(git describe --tags --abbrev=0)
            echo "Comparing to $PREV"
            redocly diff api/openapi/mcp-proxy.yaml "git:$PREV:api/openapi/mcp-proxy.yaml"
          else
            echo "No previous tag to diff; skipping."
          fi

  dependency-review:
    name: Dependency Review (fail on High/Critical)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  sbom:
    name: SBOM (SPDX)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: anchore/sbom-action@v0
        with:
          output-file: sbom.spdx.json
      - uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

# Notes:
# - CodeQL runs in a dedicated workflow (codeql.yml).
# - Secret Scanning is enforced at repo/org level; do not print secrets in logs.
# - Policies: No-Hard-Coding, SP-only DAL, Add-only DB are enforced via PR template & CODEOWNERS. 
