name: CI (API + Web + ThemeBuilder guard)

on:
  push:
    branches: [ main, develop, alpha, beta, rtm ]
  pull_request:

permissions:
  contents: read
  security-events: write
  actions: read
  packages: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  DOTNET_VERSION: "8.0.x"
  WEB_DIR: web
  API_DIR: api
  THEME_PACKAGE_NAME: mcpx-kendobridge
  THEME_PACKAGE_DIR: design/themebuilder/export/mcpx-kendobridge

jobs:
  theme-guard:
    name: ThemeBuilder export checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq (for JSON checks)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Verify ThemeBuilder export is committed
        shell: bash
        run: |
          set -euo pipefail
          PKG="$THEME_PACKAGE_DIR/package.json"
          CSS="$THEME_PACKAGE_DIR/dist/css/${THEME_PACKAGE_NAME}.css"
          SCSS_DIR="$THEME_PACKAGE_DIR/dist/scss"

          echo "Checking ThemeBuilder package at: $THEME_PACKAGE_DIR"
          test -f "$PKG"      || { echo "::error file=$PKG::Missing ThemeBuilder package.json"; exit 1; }
          test -f "$CSS"      || { echo "::error file=$CSS::Missing compiled CSS from ThemeBuilder export"; exit 1; }
          test -d "$SCSS_DIR" || { echo "::error file=$SCSS_DIR::Missing SCSS sources from ThemeBuilder export"; exit 1; }

          # Must be tracked by git (not ignored)
          git ls-files --error-unmatch "$PKG" >/dev/null 2>&1 || { echo "::error::ThemeBuilder package.json is not tracked by git"; exit 1; }
          git ls-files --error-unmatch "$CSS" >/dev/null 2>&1 || { echo "::error::ThemeBuilder dist assets are not tracked by git (check .gitignore)."; exit 1; }

      - name: Check package name is lowercase "${{ env.THEME_PACKAGE_NAME }}"
        shell: bash
        run: |
          set -euo pipefail
          NAME=$(jq -r '.name' "$THEME_PACKAGE_DIR/package.json")
          if [ "$NAME" != "${THEME_PACKAGE_NAME}" ]; then
            echo "::error file=$THEME_PACKAGE_DIR/package.json::Theme package name must be '${THEME_PACKAGE_NAME}' (found: '$NAME')."
            exit 1
          fi

      - name: Verify Web depends on the local theme package
        shell: bash
        run: |
          set -euo pipefail
          WEB_PKG="$WEB_DIR/package.json"
          test -f "$WEB_PKG" || { echo "::error file=$WEB_PKG::Missing $WEB_PKG"; exit 1; }

          echo "Validating JSON in $WEB_PKG"; nl -ba "$WEB_PKG" | sed -n '1,160p'
          jq . "$WEB_PKG" >/dev/null || { echo "::error file=$WEB_PKG::Invalid JSON (see lines above)."; exit 1; }

          DEP=$(jq -r --arg n "${THEME_PACKAGE_NAME}" '.dependencies[$n] // .devDependencies[$n] // empty' "$WEB_PKG")
          if [ -z "$DEP" ]; then
            echo "::error file=$WEB_PKG::Add \"${THEME_PACKAGE_NAME}\": \"file:../${THEME_PACKAGE_DIR}\" to dependencies."
            exit 1
          fi
          if [ "$DEP" != "file:../${THEME_PACKAGE_DIR}" ]; then
            echo "::error file=$WEB_PKG::Dependency path must be \"file:../${THEME_PACKAGE_DIR}\" (found: $DEP)."
            exit 1
          fi

      - name: Verify single theme import (no base theme duplicates)
        shell: bash
        run: |
          set -euo pipefail
          test -d "$WEB_DIR/src" || { echo "::error::Missing $WEB_DIR/src directory"; exit 1; }

          # Fail if direct base Fluent theme imports are present
          if grep -R -nE "@progress/kendo-theme-[^/]+/dist/(all|index)\.(css|scss)" "$WEB_DIR"/src 2>/dev/null; then
            echo "::error::Found direct Kendo base-theme import(s) in /web/src. Remove them and import only from '${THEME_PACKAGE_NAME}'."
            exit 1
          fi

          # Require at least one import from the ThemeBuilder package
          if ! grep -R -nE "${THEME_PACKAGE_NAME}/dist/(scss|css)/" "$WEB_DIR"/src 2>/dev/null; then
            echo "::error::Web app does not import the ThemeBuilder package. Import '${THEME_PACKAGE_NAME}/dist/scss/index.scss' (or CSS) in your entry file."
            exit 1
          fi

      - name: Case sanity (Linux runners are case-sensitive)
        shell: bash
        run: |
          set -euo pipefail
          # Dockerfile should be capitalized
          if [ -f "$API_DIR/dockerfile" ]; then
            echo "::error file=$API_DIR/dockerfile::Rename to 'Dockerfile' (capital D) to build in Linux runners."
            exit 1
          fi
          # Recommend lowercased 'openapi' folder
          if [ -d "$API_DIR/OpenApi" ]; then
            echo "::warning file=$API_DIR/OpenApi::Consider renaming folder to 'openapi' for consistency."
          fi

  web:
    name: Build & test web
    needs: theme-guard
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WEB_DIR }}
    steps:
      - uses: actions/checkout@v4

      # Cache when package-lock.json exists
      - name: Setup Node (with cache)
        if: ${{ hashFiles(format('{0}/package-lock.json', env.WEB_DIR)) != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WEB_DIR }}/package-lock.json

      - name: Setup Node (no cache fallback)
        if: ${{ hashFiles(format('{0}/package-lock.json', env.WEB_DIR)) == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Activate Kendo UI license (optional)
        if: ${{ secrets.KENDO_UI_LICENSE != '' }}
        run: npx --yes kendo-ui-license activate "${KENDO_UI_LICENSE}"
        env:
          KENDO_UI_LICENSE: ${{ secrets.KENDO_UI_LICENSE }}

      - name: Install
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Lint (if configured)
        run: npm run lint --if-present

      - name: Build
        run: npm run build

      - name: Unit tests (if present)
        run: npm test --if-present

      - name: Upload web build
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: |
            ${{ env.WEB_DIR }}/dist
            ${{ env.WEB_DIR }}/build
          if-no-files-found: warn

  api:
    name: Build & test API
    needs: theme-guard
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.API_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal

  codeql:
    name: CodeQL (JS + C#)
    if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/main' }}
    needs: [web, api]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript, csharp
      - uses: github/codeql-action/analyze@v3
